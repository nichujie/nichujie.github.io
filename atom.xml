<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nichujie.github.io/</id>
    <title>Cheney的个人博客</title>
    <updated>2022-01-20T15:45:41.515Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nichujie.github.io/"/>
    <link rel="self" href="https://nichujie.github.io/atom.xml"/>
    <subtitle>今天Cheney学会编程了吗？</subtitle>
    <logo>https://nichujie.github.io/images/avatar.png</logo>
    <icon>https://nichujie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Cheney的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[Java学习日记]]></title>
        <id>https://nichujie.github.io/post/java-xue-xi-ri-ji/</id>
        <link href="https://nichujie.github.io/post/java-xue-xi-ri-ji/">
        </link>
        <updated>2022-01-19T11:16:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>其实我最早自学的一门语言就是Java。初一还是初二的时候某天在书店看到了<a href="https://book.douban.com/subject/6900300/">这本书</a>，头铁就买了下来（中文版豆瓣找不到，想来是太过久远，或者搞不好是盗版）。彼时根本不知道怎么学编程，看到代码片硬是背下来。</p>
<p>这学期开始Software的课好像都很喜欢用Java。而且我猜测KTH本科也很喜欢用Java，因为教授说“鉴于你们本科大多学过Java”。</p>
<p>之前实习的一个公司后端也用的是Spring，我也接过一些小需求，但基本上是人工机器学习：看着代码学代码，根本不知道内容是啥，但还是能写完。</p>
<p>综上所述，是时候学Java了。</p>
<h2 id="2022120">2022.1.20</h2>
<p>找到了一些网站：</p>
<ul>
<li>https://www.codecademy.com/courses/learn-java/lessons/hello-world-java/exercises/introduction-to-java（UI好看）</li>
<li>https://www.programiz.com/java-programming（UI好看）</li>
<li>https://beginnersbook.com/java-tutorial-for-beginners-with-examples/（看起来内容比较全）</li>
<li>https://www.liaoxuefeng.com/wiki/1252599548343744/1255883772263712 （老牌）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Docker的网络配置]]></title>
        <id>https://nichujie.github.io/post/guan-yu-docker-de-wang-luo-pei-zhi/</id>
        <link href="https://nichujie.github.io/post/guan-yu-docker-de-wang-luo-pei-zhi/">
        </link>
        <updated>2020-02-07T06:31:34.000Z</updated>
        <content type="html"><![CDATA[<p>最近实习的一个小项目中涉及到了使用docker部署。正好之前一直想学习下docker，于是本着业务驱动学习的心态，花了1天速成了一下docker。然而，当我开始着手配置容器的时候，容器间的通信和网络死活配置不好。最终，经历了整整2天的查阅文档和尝试，才完成了老大的要求（好菜）。关于这个问题的描述网上并不多，于是我决定写一篇博客来记录一下。</p>
<h2 id="问题背景">问题背景</h2>
<p>为了快速部署和迭代，整个项目采用了docker化部署的策略。简单来说就是一个应用模块打包成一个docker容器：react的前端一个，django一个，java的后端一个，MySQL一个，nginx一个...</p>
<p>一般来说流程都是用docker-compose来编排和部署一组容器，这一组容器相当于封装在了一起，共享各种资源，就好像在同一台虚拟机上运行一样。但是偶尔，我们会遇到这样的需求：为了降低代码的耦合度，要求将不同的应用组封装在不同的docker-compose，但是仍然需要互相通信。简言之，两个docker-compose文件中的容器如何互相通信呢？</p>
<h2 id="问题描述">问题描述</h2>
<p>让我们简化一下模型（略去了部分细节和多余的容器）：</p>
<pre><code class="language-yml"># db/docker-compose-1.yml
# MySQL
version: &quot;3&quot;
services:
  db:
    container_name: my-db
    image: mysql
    ports:
      - &quot;3306:3306&quot;
</code></pre>
<pre><code class="language-yml"># app/docker-compose-2.yml
# django app
version: &quot;3&quot;
services:
  web:
    container_name: my-app
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - &quot;8000:8000&quot;
</code></pre>
<p>简单来说，我现在有两个docker-compose文件，分别run起来之后，我希望实现我的django app可以访问MySQL数据库（在3306端口）。</p>
<p>乍一看，好像分别run起来就行了呀，反正MySQL已经映射到本机的3306端口，django只要去连接localhost的3306端口就好了嘛！</p>
<p>其实不然。docker-compose会为每一个文件创建一个network（docker的虚拟网络），把每一个文件里的所有容器连接在一个网络。也就是说，上面的两个容器实际上处于不同的网络！而众所周知，容器化技术可以近似的认为是虚拟机技术，所以每个容器和宿主机也没什么关系。一句话总结：<strong>MySQL所在容器的localhost、django所在容器的localhost，和你宿主机的localhost，这三个都不一样！！！</strong></p>
<h2 id="问题解决">问题解决</h2>
<p>众所周知(?)，docker的网络类型一般有4种（还有个神奇的就不提了）：</p>
<ul>
<li><strong>Bridge</strong>：默认模式，虚拟网桥，一个网桥内的容器可以互相通信。</li>
<li><strong>Host</strong>：直接与宿主机共用网络，也就是localhost直接变成宿主机。（但是该模式只有linux支持，且该模式与ports和expose选项不兼容，因为反正已经融为一体了，所有端口与主机相同）</li>
<li><strong>Overlay</strong>：跨主机的容器间相互通信。</li>
<li><strong>None</strong>：没有任何网络。</li>
</ul>
<p>那么最粗暴的解决方式当然是统统Host。但是这样很不优雅，容器化的意义就被弱化了。而且要mac和windows用户怎么办？（作为一个mac用户其实一开始尝试过host，半天之后才在文档发现一行小字说只支持linux...）</p>
<p>查阅了文档之后发现了这样一种神奇操作，只要在docker-compose-2.yml后面加上：</p>
<pre><code class="language-yml"># app/docker-compose-2.yml
# django app
version: &quot;3&quot;
services:
  web:
    container_name: my-app
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - &quot;8000:8000&quot;
networks:
  default:
    external:
      name: db_default
</code></pre>
<p>这是一个全局的networks设置（和services同级），意思是把<strong>默认</strong>的全局网络设置为一个叫<code>db_default</code>的网络（external的意思是去找现存的网络，而不是新建一个）。</p>
<p>那为什么网络的名字叫<code>db_default</code>呢？原因是每一个docker-compose启动的时候会创建一个叫<code>[projectname]_default</code>的网络，projectname就是这个文件所在的<strong>文件夹名字</strong>。例如上面两个docker-compose分别启动的话，会产生一个<code>db_default</code>和一个<code>app_default</code>。现在的操作就是阻止了<code>app_default</code>的生成，而让它加入现存的<code>db_default</code>（当然这也意味着db要在web前启动）。</p>
<p>具体的网络名字可以到命令行输入<code>docker network ls</code>看到：<br>
<img src="https://nichujie.github.io//post-images/1581176477901.png" alt="" loading="lazy"></p>
<p>当然如果你觉得<code>db_default</code>这个自动生成的名字不太保险，你也可以自己设置：</p>
<pre><code class="language-yml"># db/docker-compose-1.yml
# MySQL
version: &quot;3&quot;
services:
  db:
    container_name: my-db
    image: mysql
    networks:
      - my_net
    ports:
      - &quot;3306:3306&quot;
networks:
  my_net:
    name: my_net
</code></pre>
<p>上面的networks在db的下级，表示加入一个叫<code>my_net</code>的网络，而下面那个全局的networks表示创建一个叫<code>my_net</code>的网络。此时<code>db_default</code>不再存在。</p>
<pre><code class="language-yml"># app/docker-compose-2.yml
# django app
version: &quot;3&quot;
services:
  web:
    container_name: my-app
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - &quot;8000:8000&quot;
networks:
  default:
    external:
      name: my_net
</code></pre>
<p>然后再修改下django的docker-compose设置，让它也去找现存的<code>my_net</code>。就此，容器间的网络配置就解决了。这两个容器现在连接到了一个网络中，我是不是就能在django中通过localhost连接数据库了呢？</p>
<p>还是不能。此时如果运行<code>docker network inspect my_net</code>查看网络设置，会在<code>Containers</code>一项下发现，这两个容器虽然连到了一个网络里，但是ip地址仍然不同，就类似于一个局域网里的两台机器。</p>
<p>但不要担心，当两个container连接到一个网络后，容器名会变成自己的hostname，以区分不同的容器。此时就可以通过容器名来访问数据库，只需要修改下django的配置文件:</p>
<pre><code class="language-python">DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysql',
        'USER': 'root',
        'PASSWORD': '****',
        # Hostname must be container name.
        'HOST': 'my-db',
        'PORT': '3306',
    }
}
</code></pre>
<p>也就是完整的mysql地址从<code>mysql://127.0.0.1:3306/</code>变成了<code>mysql://my-db:3306/</code>。这里<code>my-db</code>相当于域名，最终还是会解析成这个容器在局域网里的ip。</p>
<h2 id="总结与补充">总结与补充</h2>
<ol>
<li>最终的效果是实现了两个docker-compose文件内的容器通信，而没有与宿主机的网络产生过多的交集，端口依然整洁，保证了容器与容器间，容器与宿主机间的隔离。</li>
<li>不推荐使用<a href="https://docs.docker.com/compose/compose-file/#network_mode">network_mode</a>来设置，虽然也有container或者service这个选项，但是会与ports设置冲突！你就没办法把django的端口暴露出来了！（除非你把django的端口暴露设置到db那个service去，但这样一来就耦合了）</li>
<li>不推荐links或者external_links，这两个都是legacy option，未来会被移除。</li>
<li>要注意下django的端口是跑在<code>0.0.0.0:8000</code>，如果命令只写8000或者不指明端口号，还是会跑在<code>127.0.0.1</code>，端口暴露是映射不出去的！</li>
<li>事实证明看文档速成是会出问题的。</li>
</ol>
<h2 id="reference">Reference</h2>
<p>[1] https://docs.docker.com/compose/networking/<br>
[2] https://docs.docker.com/compose/compose-file/</p>
]]></content>
    </entry>
</feed>